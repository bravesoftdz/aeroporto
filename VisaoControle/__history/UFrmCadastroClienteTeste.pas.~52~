unit UFrmCadastroClienteTeste;

interface

uses
  Windows, Messages, SysUtils, Variants, Classes, Graphics, Controls, Forms,
  Dialogs, ExtCtrls, Mask, StdCtrls, ComCtrls, Buttons, PwCtrls
  , UCliente
  , UEntidade
  , UUtilitarios
  , URegraCRUD
  , URegraCadastroCliente
  , UDM
  , UFrmCRUD
  ;

type
  TFrmCadastroClienteTeste = class(TFrmCRUD)
    pcFundo: TPageControl;
    tsInformacoes: TTabSheet;
    gbInformacoes: TGroupBox;
    lbNome: TLabel;
    lbCPF: TLabel;
    lbDataNascimento: TLabel;
    lbEstadoCivil: TLabel;
    lbRendaMensal: TLabel;
    edNome: TEdit;
    meCPF: TMaskEdit;
    dtpDataNascimento: TDateTimePicker;
    rgSexo: TRadioGroup;
    cbEstadoCivil: TComboBox;
    cbxPossuiVeiculoProprio: TCheckBox;
    edRendaMensal: TFloatEdit;
    tsEndereco: TTabSheet;
    lbCidade: TLabel;
    btnLocalizarCidade: TButton;
    stNomeCidade: TStaticText;
    edCidade: TIntegerEdit;
  private
    FRegraCadastroCliente: TRegraCadastroCliente;
    function RetornaNovaEntidade: TENTIDADE;
    function RetornaNovaRegra: TRegraCRUD;

  protected
    procedure HabilitaCampos(const ceTipoOperacaoUsuario: TTipoOperacaoUsuario); override;
    procedure LimpaCampos; override;
    procedure Inicializa; override;
    procedure PreencheEntidade(const coENTIDADE: TENTIDADE); override;
    procedure PreencheFormulario(const  coENTIDADE: TENTIDADE); override;
    procedure PosicionaCursorPrimeiroCampo; override;

    function RetornaDescricaoEntidade: String; override;

  public
    constructor Create(const coOwner: TComponent);

    class procedure MostraFormulario(const coOwner: TComponent);

  end;

implementation

{$R *.dfm}

uses
    UPersiste
  , UMensagens
  ;

{ TFrmCadastroClienteTeste }

class procedure TFrmCadastroClienteTeste.MostraFormulario(const coOwner: TComponent);
var
  loForm: TFrmCadastroClienteTeste;
begin
  loForm             := TFrmCadastroClienteTeste.Create(coOwner);
  loForm.WindowState := wsMaximized;
end;

procedure TFrmCadastroClienteTeste.Inicializa;
var
  leEstadoCivil: TEstadoCivil;
begin
  inherited;

  for leEstadoCivil := Low(TEstadoCivil) to High(TEstadoCivil) do
    cbEstadoCivil.Items.Add(CNT_DESCRICAO_ESTADO_CIVIL[leEstadoCivil]);
end;

constructor TFrmCadastroClienteTeste.Create(const coOwner: TComponent);
begin
  Inherited Create(Owner, TCLIENTE, TRegraCadastroCliente);
end;

procedure TFrmCadastroClienteTeste.HabilitaCampos(const ceTipoOperacaoUsuario: TTipoOperacaoUsuario);
begin
  Inherited;
  gbInformacoes.Enabled := ceTipoOperacaoUsuario in [touAtualizacao, touInsercao];
end;

procedure TFrmCadastroClienteTeste.PosicionaCursorPrimeiroCampo;
begin
  edNome.SetFocus;
end;

procedure TFrmCadastroClienteTeste.LimpaCampos;
begin
  Inherited;

  edNome.Text                     := EmptyStr;
  meCPF.Text                      := EmptyStr;
  dtpDataNascimento.DateTime      := Now;
  cbEstadoCivil.ItemIndex         := 0;
  cbxPossuiVeiculoProprio.Checked := False;
  edRendaMensal.FloatNumber       := 0;
  rgSexo.ItemIndex                := 0;
  pcFundo.ActivePage              := tsInformacoes;
  edCidade.IntegerNumber          := 0;
  stNomeCidade.Caption            := EmptyStr;
end;

procedure TFrmCadastroClienteTeste.PreencheEntidade(const coENTIDADE: TENTIDADE);
var
  loCLIENTE: TCLIENTE;
begin
  loCLIENTE := TCLIENTE(coENTIDADE);

  loCLIENTE.NOME            := edNome.Text;
  loCLIENTE.CPF             := meCPF.Text;
  loCLIENTE.SEXO            := TSexo(rgSexo.ItemIndex);
  loCLIENTE.ESTADO_CIVIL    := TEstadoCivil(cbEstadoCivil.ItemIndex);
  loCLIENTE.DATA_NASCIMENTO := dtpDataNascimento.DateTime;
  loCLIENTE.POSSUI_VEICULO  := cbxPossuiVeiculoProprio.Checked;
  loCLIENTE.RENDA_MENSAL    := edRendaMensal.FloatNumber;
  loCLIENTE.CIDADE.ID       := edCidade.IntegerNumber;
end;

procedure TFrmCadastroClienteTeste.PreencheFormulario(const coENTIDADE: TENTIDADE);
var
  loCLIENTE: TCLIENTE;
begin
  loCLIENTE := TCLIENTE(coENTIDADE);

  edNome.Text                     := loCLIENTE.NOME;
  edRendaMensal.FloatNumber       := loCLIENTE.RENDA_MENSAL;
  meCPF.Text                      := loCLIENTE.CPF;
  rgSexo.ItemIndex                := Ord(loCLIENTE.SEXO);
  cbEstadoCivil.ItemIndex         := Ord(loCLIENTE.ESTADO_CIVIL);
  dtpDataNascimento.DateTime      := loCLIENTE.DATA_NASCIMENTO;
  cbxPossuiVeiculoProprio.Checked := loCLIENTE.POSSUI_VEICULO;
  edCidade.IntegerNumber          := loCLIENTE.CIDADE.ID;
  stNomeCidade.Caption            := loCLIENTE.CIDADE.NOME;
end;

function TFrmCadastroClienteTeste.RetornaDescricaoEntidade: String;
begin
  Result := STR_CLIENTE;
end;

end.
