unit URegraCadastroEstado;

interface

uses
    UPersisteEstado
  , UEstado
  , URegraCRUD
  , UEntidade
  ;

type
  TRegraCadastroEstado = class(TRegraCRUD)
  private
    FPersisteEstado: IPersisteEstado;

    procedure Valida(const coESTADO: TESTADO);

  public
    constructor Create;

    procedure ValidaNome(const csNome: String);
    procedure ValidaUF(const csUF: String);
    procedure ValidaUFUnico(const csUF: String;
                            const ciId: Integer);    
    procedure ValidaEstadoExistente(const ciId: Integer);

    procedure Insere(const coENTIDADE: TENTIDADE);
    procedure Atualiza(const coENTIDADE: TENTIDADE);
    procedure Exclui(const ciId: Integer);

    function Retorna(const ciId: Integer): TENTIDADE;
    function RetornaUF(const csUF: String): TENTIDADE;
  end;

implementation

{ TRegraCadastroEstado }

uses
    UPersisteEstadoDB
  , SysUtils
  , UMensagens
  ;

constructor TRegraCadastroEstado.Create;
begin
  FPersisteEstado := TPersisteEstadoDB.Create;
end;

procedure TRegraCadastroEstado.Atualiza(const coENTIDADE: TENTIDADE);
var
  loESTADO: TESTADO;
begin
  loESTADO := TESTADO(coENTIDADE);

  ValidaEstadoExistente(loESTADO.ID);
  Valida(loESTADO);

  FPersisteEstado.Atualiza(loESTADO);
end;

procedure TRegraCadastroEstado.Exclui(const ciId: Integer);
begin
  ValidaEstadoExistente(ciId);
  FPersisteEstado.Exclui(ciId);
end;

procedure TRegraCadastroEstado.Insere(const coESTADO: TESTADO);
begin
  Valida(coESTADO);
  FPersisteEstado.Insere(coESTADO);
end;

function TRegraCadastroEstado.RetornaUF(const csUF: String): TESTADO;
begin
  Result := FPersisteEstado.RetornaUF(csUF);
end;

function TRegraCadastroEstado.Retorna(const ciId: Integer): TESTADO;
begin
  Result := FPersisteEstado.Retorna(ciId);
end;

procedure TRegraCadastroEstado.Valida(const coESTADO: TESTADO);
begin
  ValidaNome(coESTADO.NOME);
  ValidaUF(coESTADO.UF);
  ValidaUFUnico(coESTADO.UF, coESTADO.ID);
end;

procedure TRegraCadastroEstado.ValidaEstadoExistente(const ciId: Integer);
begin
  if not FPersisteEstado.Achou(ciId) then
    raise Exception.CreateFmt(STR_ESTADO_NAO_ENCONTRADO, [ciId]);
end;

procedure TRegraCadastroEstado.ValidaNome(const csNome: String);
begin
  if trim(csNome) = EmptyStr then
    raise Exception.Create(STR_ESTADO_NOME_NAO_FOI_INFORMADO);
end;

procedure TRegraCadastroEstado.ValidaUF(const csUF: String);

begin
  if trim(csUF) = EmptyStr then
    raise Exception.Create(STR_ESTADO_UF_NAO_FOI_INFORMADO);
end;

procedure TRegraCadastroEstado.ValidaUFUnico(const csUF: String;
                                             const ciId: Integer);
var
  loESTADO: TESTADO;
begin
  if FPersisteEstado.AchouUF(csUF) then
    begin
      loESTADO := FPersisteEstado.RetornaUF(csUF);
      if loESTADO.ID <> ciId then
         raise Exception.CreateFmt(STR_ESTADO_JA_EXISTE_ESTADO_CADASTRADO_COM_MESMO_UF
                                 , [csUF]);
    end;
end;

end.
