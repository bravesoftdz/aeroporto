unit URepositorioClienteMemoria;

interface

uses
    Classes
  , UCliente
  , SysUtils
  , UMensagens
  , UPersisteCliente
  ;

type
  TPersisteClienteMemoria = class(TInterfacedObject, IPersisteCliente)
  private
    FListaClientes: TList;

  public
    constructor Create;

    procedure Atualiza(const coCLIENTE: TCLIENTE);
    procedure Insere(const coCLIENTE: TCLIENTE);
    procedure Exclui(const ciId: Integer);

    function Retorna(const ciId: Integer): TCLIENTE;
    function Achou(const ciId: Integer): Boolean;     
  end;

implementation

{ TPersisteClienteMemoria }

constructor TPersisteClienteMemoria.Create;
begin
  FListaClientes := TList.Create;
end;

procedure TPersisteClienteMemoria.Exclui(const ciId: Integer);
begin
  if Pred(ciId) > FListaClientes.Count then
    raise Exception.CreateFmt(STR_CLIENTE_NAO_ENCONTRADO, [ciId]);

  FListaClientes.Delete(Pred(ciId));
end;

procedure TPersisteClienteMemoria.Insere(const coCLIENTE: TCLIENTE);
begin
  if coCLIENTE.ID = 0 then
    begin
      FListaClientes.Add(coCLIENTE);
      coCLIENTE.ID := FListaClientes.Count;
    end;
end;

procedure TPersisteClienteMemoria.Atualiza(const coCLIENTE: TCLIENTE);
begin
  //Sem implementação
end;

function TPersisteClienteMemoria.Retorna(const ciId: Integer): TCLIENTE;
begin
  Result := Nil;
end;

function TPersisteClienteMemoria.Achou(const ciId: Integer): Boolean;
begin
  Result := False;
end;

end.
